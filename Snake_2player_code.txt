//***************************************************************************************
//  MSP430 Blink the LED Demo - Software Toggle P1.0
//
//  Description; Toggle P1.0 by xor'ing P1.0 inside of a software loop.
//  ACLK = n/a, MCLK = SMCLK = default DCO
//
//                MSP430x5xx
//             -----------------
//         /|\|              XIN|-
//          | |                 |
//          --|RST          XOUT|-
//            |                 |
//            |             P1.0|-->LED
//
//  J. Stevenson
//  Texas Instruments, Inc
//  July 2011
//  Built with Code Composer Studio v5
//***************************************************************************************
// Interrupts for inputs. PORT 2 drives the matrix
// PORT 1 looks for interrupts.
// pdirx 0 -> stop
// 		 1 -> up
//		 2 -> right
//		 4 -> down
//		 8 -> left
#include <msp430.h>
#define xbound 16
#define ybound 16
#define scorecount 21
#define sinkdata 	BIT0		//Sink refers to TLC5916
#define sinkclk  	BIT1
#define sinklatch	BIT2
#define srcdata		BIT3		//Source refers to TLC59213
#define srcclk		BIT6
#define srclatch	BIT7

char p1x,p1y,p2x,p2y;
char pdir1,pdir2;
char fx,fy;
int maskp1,maskp2,maskf;
char p1s,p2s;
char i,j;
char gameover;


void configure_clk()	// This is to configure system clocks and clocks which drives the timers
{
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
}

void init_timer()		// We use Timer_A1 to generate random numbers and Timer_A0 update the game.
{
	TA0CTL = 0x02D0;	// Clock source = SM_CLK = 1 MHz
						// Input clock divider = 8 => timer clock = 1MHz/8 = 125KHz
						// Mode is Up mode (counting up to TACCR0)
						// TimerA interrupt enabled.*/
	TA1CTL = 0x02A0;	// Clock source = SM_CLK = 1 MHz
						// Input clock divider = 4  => timer clock = 1MHz/4 = 250KHz
						// Mode is free running (counting up to 0xFFFF)
						// TimerA interrupt disabled.
	TA0CCTL0 = 0x2890;  // Capture Mode off
						// Compare mode (Not Capture Mode)
						// Output mode: Toggle, Compare interrupt enabled*/
	TA1CCTL0 = 0x2880;
	TA0CCR0 = 0x8FF0;
}

void configure_pins()
{
	P2SEL = ~(0xFF);
	P2DIR |= (sinkdata+sinkclk+sinklatch+srcdata+srcclk+srclatch);	// Setting port 2 pins to output to drive the matrix
	P2OUT &= ~(sinkdata+sinkclk+sinklatch+srcdata+srcclk+srclatch); // Set them to be low on startup
	P1DIR  = 0x00; 													// Setting all Pins on PORT 1 to inputs
	P1OUT |= 0xFF;
	P1REN |= 0XFF;													// Pull up all the PORT 1 Pins
	P1IE  |= 0xFF;                             						// PORT1 interrupt enabled
	P1IES |= 0xFF;                            						// PORT1 High->low edge (Interrupt occurs when pin goes from high to low).
	P1IFG  = 0x00; 													//Clearing interrupt flag
}

void init_game()
{
	p1x = xbound>>2;
	p1y = ybound>>2;
	pdir1 = 0;
	pdir2 = 0;
	p2x = xbound - (xbound>>2);
	p2y = ybound - (ybound>>2);
	fx  = xbound>>1;
	fy  = ybound>>1;
	p1s = 0;
	p2s = 0;
	gameover = 0;
}

void draw()
{
	maskp1 = 0;
	maskp2 = 0;
	maskf  = 0;
	P2OUT |= srcdata;
	P2OUT |= srcclk;
	P2OUT &= ~srcclk;
	P2OUT &= ~srcdata;
	for(i = 0; i < ybound ; i++)
	{
		maskp1 = 0;
		maskp2 = 0;
		maskf  = 0;
		if(i == p1y)
			maskp1 = 0x8000 >> p1x;
		if(i == p2y)
			maskp2 = 0x8000 >> p2x;
		if(i == fy)
			maskf  = 0x8000 >> fx;

			for(j = 0; j < ybound ; j++)
			{
				if((maskp2&(0x0001<<j)))
					P2OUT |= sinkdata;
				else
					P2OUT &= ~sinkdata;
				P2OUT |= sinkclk;
				P2OUT &= ~sinkclk;

			}
			for(j = 0; j < ybound ; j++)
			{
				if((maskf&(0x0001<<j)))
					P2OUT |= sinkdata;
				else
					P2OUT &= ~sinkdata;
				P2OUT |= sinkclk;
				P2OUT &= ~sinkclk;

			}
			for(j = 0; j < ybound ; j++)
			{
				if((maskp1&(0x0001<<j)))
					P2OUT |= sinkdata;
				else
					P2OUT &= ~sinkdata;
					P2OUT |= sinkclk;
					P2OUT &= ~sinkclk;
			}
			P2OUT |= sinklatch;
			P2OUT |= srclatch;
			P2OUT &= ~sinklatch;
			P2OUT &= ~srclatch;
		P2OUT |= srcclk;
		P2OUT &= ~srcclk;
	}
}

int main(void) {
	WDTCTL = WDTPW | WDTHOLD;		// Stop watchdog timer
	configure_clk();
	configure_pins();
	init_timer();
	__bis_SR_register(GIE);

	while(1)
	{
		init_game();
		while((p1s + p2s) < scorecount && gameover == 0)
				{
					draw();
				}
		i = 0;
		while(i < 10)
		{
			_delay_cycles(100000);
			i++;
		}
	}
	

	return 0;
}

#pragma vector = PORT1_VECTOR
__interrupt void Port1(void)			// Interrupt that reads Input from port 1
{
	if(P1IFG &(BIT0+BIT1+BIT2+BIT3))
		pdir1 = P1IFG &(BIT0+BIT1+BIT2+BIT3);
	if(P1IFG &(BIT4+BIT5+BIT6+BIT7))
		pdir2 = (P1IFG &(BIT4+BIT5+BIT6+BIT7))>>4;
	P1IFG = 0x00;
}

#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer_A(void)
{
	if(pdir1&BIT0)
		p1y += 1;
	else if(pdir1&BIT1)
		p1x += 1;
	else if(pdir1&BIT2)
		p1y -= 1;
	else if(pdir1&BIT3)
		p1x -= 1;

	if(pdir2&BIT0)
		p2y += 1;
	else if(pdir2&BIT1)
		p2x += 1;
	else if(pdir2&BIT2)
		p2y -= 1;
	else if(pdir2&BIT3)
		p2x -= 1;

	if(p1x == fx && p1y == fy)
		{
			p1s++;
			fx = TA1R&(BIT0+BIT1+BIT2+BIT3);
			fy = (TA1R&(BIT5+BIT4+BIT3+BIT2)>>2);

		}
	if(p2x == fx && p2y == fy)
		{
			p2s++;
			fx = TA1R&(BIT0+BIT1+BIT2+BIT3);
			fy = (TA1R&(BIT5+BIT4+BIT3+BIT2)>>2);
		}
	if(p1x>>4 || p2x>>4 || p1y>>4 || p2y>>4)
		gameover = 1;

}
